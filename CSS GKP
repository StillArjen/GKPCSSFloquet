import math
from dataclasses import dataclass
from typing import Dict, Tuple, List, Set, Callable
import stim
import pymatching
import networkx as nx
import time
import csv
import matplotlib.pyplot as plt

# Color constants for clarity
RED, GREEN, BLUE = 0, 1, 2

# Define the edges around a hexagon centered at origin
FIRST_EDGES: List[Tuple[complex, complex]] = [
    (+1 - 1j, +1),  # Top right
    (+1 + 1j, -1 + 1j),  # Bottom
    (-1, -1 - 1j),  # Top left
]
SECOND_EDGES: List[Tuple[complex, complex]] = [
    (-1 - 1j, +1 - 1j),  # Top
    (+1, +1 + 1j),  # Bottom right
    (-1 + 1j, -1),  # Bottom left
]

@dataclass(frozen=True)
class Edge:
    left: complex
    right: complex

# Define the periodic boundary conditions for both directions
def make_torus(c: complex, distance: int) -> complex:
    """Apply periodic boundary conditions to coordinate c"""
    width = 4 * distance
    height = 6 * distance
    n_width = c.real % width
    n_height = c.imag % height
    return n_width + n_height * 1j

def sorted_complex(qcoord: List[complex]) -> List[complex]:
    """Sort complex coordinates by real then imaginary parts"""
    return sorted(qcoord, key=lambda x: (x.real, x.imag))


@dataclass
class Honeycomb_lattice:
    width: int
    height: int
    hex_center: Dict[complex, int]  # Maps coordinates to colors (0=red, 1=green, 2=blue)
    edge_color: Dict[Edge, int]  # Maps edges to their colors
    qcoords: List[complex]
    all_edges: List[Edge]  # List of all edges in the lattice
    q2i: Dict[complex, int]  # Maps complex coordinates to integers

# Assign colors for two types of edges around a hexagon of given color
def _edge_color_around_hex(hex_color: int) -> Tuple[int, int]:
    """Returns the colors for first and second edge types around a hex of color c_hex"""
    if hex_color == RED:
        return (GREEN, BLUE)  
    elif hex_color == GREEN:
        return (BLUE, RED) 
    else:  # BLUE
        return (RED, GREEN)

# Return an instance of the honeycomb lattice
def build_lattice(distance: int) -> Honeycomb_lattice:
    """Build a honeycomb lattice with the given distance parameter"""
        
    width = 4 * distance
    height = 6 * distance

    hex_center: Dict[complex, int] = {}  # Coordinates to color mapping
    for row in range(3 * distance):
        for col in range(2 * distance):
            center = row * 2j + 2 * col - 1j * (col % 2)
            category = (-row - col % 2) % 3  # Determine hex color (0=red, 1=green, 2=blue)
            hex_center[make_torus(center, distance)] = category

    qcoords: Set[complex] = set()  # Set of qubit coordinates(Using set to avoid duplicates)
    for h in hex_center:
        for (a, b) in FIRST_EDGES + SECOND_EDGES:
            qcoords.add(make_torus(h + a, distance))
            qcoords.add(make_torus(h + b, distance))

    # Create an edge, ensuring consistent orientation
    def make_edge(a: complex, b: complex) -> Edge:
        A, B = make_torus(a, distance), make_torus(b, distance)
        # Compare both real and imaginary parts for consistent ordering
        if (A.real, A.imag) < (B.real, B.imag):
            return Edge(A, B)
        else:
            return Edge(B, A)
    
    edge_color: Dict[Edge, int] = {}
    for hex_coord, hex_color in hex_center.items():
        (first_color, second_color) = _edge_color_around_hex(hex_color)

        for v_1, v_2 in FIRST_EDGES:
            edge = make_edge(hex_coord + v_1, hex_coord + v_2)
            check = edge_color.get(edge, None) # Check if the edge has been assigned a color. If not, return None
            if check is None:
                edge_color[edge] = first_color
            else:  # The edge has been assigned a color, then check if the color is the same
                if check != first_color:
                    raise ValueError(f"Conflict: edge {edge} assigned {check} vs {first_color}")
        
        for v_1, v_2 in SECOND_EDGES:
            edge = make_edge(hex_coord + v_1, hex_coord + v_2)
            check = edge_color.get(edge, None)
            if check is None:
                edge_color[edge] = second_color
            else:
                if check != second_color:
                    raise ValueError(f"Conflict: edge {edge} assigned {check} vs {second_color}")
    
    # Create a sorted list of all edges
    all_edges = sorted(edge_color.keys(), 
                      key=lambda edge: (edge.left.real, edge.left.imag, edge.right.real, edge.right.imag))
    
    
    # Mapping from complex coordinates to integers
    q2i: Dict[complex, int] = {q: i for i, q in enumerate(sorted_complex(qcoords))}

    return Honeycomb_lattice(width, height, hex_center, edge_color, qcoords, all_edges, q2i)

# Generate a single cycle, containing 6 rounds 
def generate_cycle_circuit(distance: int, detectors: bool, cycle: int, depolarization_error_channel: bool) -> stim.Circuit:
    # Cycle means the cycle number of the circuit
    lattice = build_lattice(distance)
    width = lattice.width
    height = lattice.height
    
    round_circuits = [] # Store the circuits for each round
    
    measurement_times = {}  # Record the time of each measurement of single checks
    current_time = 0
    
    # Sequence: rXX, gZZ, bXX, rZZ, gXX, bZZ
    rounds = [
        (RED, "X"), (GREEN, "Z"), (BLUE, "X"),
        (RED, "Z"), (GREEN, "X"), (BLUE, "Z")
    ]
    
    # Generate measurement circuits and record measurement times
    for round_idx, (color, pauli) in enumerate(rounds):
        round_circuit = stim.Circuit()
        for edge in lattice.all_edges:
            if lattice.edge_color[edge] == color:
                q1 = lattice.q2i[edge.left]
                q2 = lattice.q2i[edge.right]
                
                # Record when this edge is measured
                edge_key = frozenset([q1, q2])
                measurement_times[(edge_key, pauli)] = current_time
                current_time += 1
                
                # Add measurement to circuit
                if pauli == "X":
                    round_circuit.append("MXX", [q1, q2])
                else:
                    round_circuit.append("MZZ", [q1, q2])
        
        round_circuits.append(round_circuit)

        # Multiply relevant measurements into the observable.
        '''included_measurements = []
        for group in edge_groups.values():
            for pair in group:
                a, b = pair
                if a.real == b.real == 1:
                    edge_key = frozenset([lattice.q2i.get(a), lattice.q2i.get(b)])
                    included_measurements.append(stim.target_rec(measurement_times[edge_key] - current_time))
        round_circuit.append_operation("OBSERVABLE_INCLUDE", included_measurements, 0)
        round_circuits.append(round_circuit)'''

    measurements_per_cycle = current_time
    measurements_per_round = measurements_per_cycle // 6
    
    if detectors:
        for round, (color, pauli) in enumerate(rounds):
            detector_circuit = stim.Circuit()
            relevant_hexes = [h for h, color in lattice.hex_center.items() if color == (round + 1) % 3] # Looking for the syndromes of the next-round plaquettes
            # Calculate detector timing
            end_time = (round + 4)  * measurements_per_round  # After 4 rounds, we can compare
            
            for h in relevant_hexes:
                record_targets = []
                # Get all edges around this hexagon
                for (a, b) in SECOND_EDGES:
                    q1 = make_torus(h + a, distance)
                    q2 = make_torus(h + b, distance)

                    # Find the edge in our qubit indices
                    q1_idx = lattice.q2i.get(q1)
                    q2_idx = lattice.q2i.get(q2)
                    
                    edge_key = frozenset([q1_idx, q2_idx])
                        # If this edge was measured, add its time
                    relative_index = (measurement_times[(edge_key, pauli)] - current_time)
                    # Add references to this measurement and its previous cycle equivalent
                    record_targets.append(stim.target_rec(relative_index))
                for (c, d) in FIRST_EDGES:
                    q3 = make_torus(h + c, distance)
                    q4 = make_torus(h + d, distance)
                    
                    q3_idx = lattice.q2i.get(q3)
                    q4_idx = lattice.q2i.get(q4)

                    if round >= 4:
                        edge_key = frozenset([q3_idx, q4_idx])
                        relative_index = measurement_times[(edge_key, pauli)] - current_time
                        record_targets.append(stim.target_rec(relative_index))
                    else:
                        edge_key = frozenset([q3_idx, q4_idx])
                        relative_index = (measurement_times[(edge_key, pauli)] - current_time) - measurements_per_cycle
                        record_targets.append(stim.target_rec(relative_index))

                detector_circuit.append_operation("DETECTOR", record_targets, [h.real, h.imag, 0])
            
            # Shift coordinates for the next temporal layer
            detector_circuit.append_operation("SHIFT_COORDS", [], [0, 0, 1])
            round_circuits[round] += detector_circuit

    full_circuit = stim.Circuit()
    for round_circuit in round_circuits:
        full_circuit += round_circuit
        
    for q, i in lattice.q2i.items():
        full_circuit.append_operation("QUBIT_COORDS", [i], [q.real, q.imag])

    return full_circuit
            

        # detectors are actually the product of the checks for r and r+4 parity.
        # The measurement checks are performed one by one on the updating rule.



# Pymatching graph for the error model
def detector_error_model_to_matching(model: stim.DetectorErrorModel) -> pymatching.Matching:
    """Convert stim error model into a pymatching graph."""
    det_offset = 0

    def _iter_model(m: stim.DetectorErrorModel, reps: int, callback: Callable[[float, List[int], List[int]], None]):
        nonlocal det_offset
        for _ in range(reps):
            for instruction in m:
                if isinstance(instruction, stim.DemRepeatBlock):
                    _iter_model(instruction.body_copy(), instruction.repeat_count, callback)
                elif isinstance(instruction, stim.DemInstruction):
                    if instruction.type == "error":
                        dets = []
                        frames = []
                        for t in instruction.targets_copy():
                            v = str(t)
                            if v.startswith("D"):
                                dets.append(int(v[1:]) + det_offset)
                            elif v.startswith("L"):
                                frames.append(int(v[1:]))
                            else:
                                raise NotImplementedError()
                        p = instruction.args_copy()[0]
                        callback(p, dets, frames)
                    elif instruction.type == "shift_detectors":
                        det_offset += instruction.targets_copy()[0]
                    elif instruction.type == "detector":
                        pass
                    elif instruction.type == "logical_observable":
                        pass
                    else:
                        raise NotImplementedError()
                else:
                    raise NotImplementedError()

    g = nx.Graph()
    num_detectors = model.num_detectors
    for k in range(num_detectors):
        g.add_node(k)
    g.add_node(num_detectors, is_boundary=True)
    g.add_node(num_detectors + 1)
    for k in range(num_detectors + 1):
        g.add_edge(k, num_detectors + 1, weight=9999999999)

    def handle_error(p: float, dets: List[int], frame_changes: List[int]):
        if p == 0:
            return
        if len(dets) == 1:
            dets.append(num_detectors)
        if len(dets) != 2:
            return  # Just ignore correlated error mechanisms (e.g. Y errors / XX errors)
        g.add_edge(*dets, weight=-math.log(p), qubit_id=frame_changes)

    _iter_model(model, 1, handle_error)

    return pymatching.Matching(g)





# Check whether the layout is correct
def print_2d(values: Dict[complex, any]):
    assert all(v.real == int(v.real) for v in values)
    assert all(v.imag == int(v.imag) for v in values)
    assert all(v.real >= 0 and v.imag >= 0 for v in values)
    w = int(max((v.real for v in values), default=0) + 1)
    h = int(max((v.imag for v in values), default=0) + 1)
    s = ""
    for y in range(h):
        for x in range(w):
            s += str(values.get(x + y*1j, "_"))
        s += "\n"
    print(s)
    

def main():
    lattice = build_lattice(3)
    #print(lattice.q2i)
    circuit = generate_cycle_circuit(1, False, 0, False)*5 + generate_cycle_circuit(1, True, 0, False)*2
    print(circuit)
    error_model = circuit.detector_error_model()
    print(error_model)
    # print_2d(lattice.hex_center)
    #samples = circuit.compile_detector_sampler().sample(10)
    #for sample in samples:
    #    print("".join("_1"[e] for e in sample))

if __name__ == "__main__":
    main()
